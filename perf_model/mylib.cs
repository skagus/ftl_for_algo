using Microsoft.VisualBasic.FileIO;
using Newtonsoft.Json.Linq;
using SimSharp;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Transactions;
using System.Xml.Linq;
using static SimSharp.Distributions;
using static System.Runtime.InteropServices.JavaScript.JSType;
using Environment = SimSharp.Environment;

namespace mylib
{
    public class MyEnv : Environment
    {
        StreamWriter waveFile = null;
        Dictionary<string, uint> vcdPairs = null;
        Dictionary<string, bool> vcdDirty = null;
        double prvTick;
        int waveIdx;
        public MyEnv(): base() {}
        public void VcdSetup(string file_name)
        {
            waveFile = new StreamWriter(file_name);
            vcdPairs = new Dictionary<string, uint>();
            vcdDirty = new Dictionary<string, bool>();
            prvTick = NowD;
            waveIdx = 0;

            waveFile.WriteLine("$version Generated by SimSharp_NHY $end");
            string szDateTime = DateTime.Now.ToString("f", CultureInfo.GetCultureInfo("en-US"));
            waveFile.WriteLine("$date " + szDateTime + " $end");
            waveFile.WriteLine("$timescale 1ns $end");
            waveFile.WriteLine("$scope module TOP $end");
        }

        public string VcdAddSignal(string name, int bits, uint init_val)
        {
            if (waveFile == null) return "";
            string sig = name;
            waveIdx++;
            vcdPairs[sig] = init_val;
            vcdDirty[sig] = true; // for 1st dump.

            waveFile.WriteLine($"$var wire {bits} {sig} {name} $end");
            return sig;
        }

        public void VcdOpenModule(string name)
        {
            waveFile.WriteLine($"$scope module {name} $end");
        }

        public void VcdCloseModule()
        {
            waveFile.WriteLine("$upscope $end");
        }

        private void vcdStart()
        {
            waveFile.WriteLine("$upscope $end");
            waveFile.WriteLine("$enddefinitions $end");
//            waveFile.WriteLine("$dumpvars");
//            vcdDump(true);
//            waveFile.WriteLine("$end");
            prvTick = NowD;
        }

        private void vcdDump(bool on_init)
        {
            if (!on_init)
            {
                long tick = (long)(prvTick * 10000000);
                waveFile.Write($"#{tick}\n");
            }
            foreach (var k in vcdPairs.Keys)
            {
                if (vcdDirty[k])
                {
                    string bin_str = Convert.ToString(vcdPairs[k], 2);
                    waveFile.WriteLine($"b{bin_str} {k}");
                    vcdDirty[k] = on_init;
                }
            }
        }

        public void VcdUpdate(string name, uint value)
        {
            if (waveFile == null) return;

            if (prvTick != NowD)
            {
                vcdDump(false);
                prvTick = NowD;
            }
            vcdPairs[name] = value;
            vcdDirty[name] = true;
        }


        public void VcdEnd()
        {
            if (waveFile == null) return;

            waveFile.Close();
            waveFile = null;
            vcdPairs = null;
            vcdDirty = null;
        }

        public virtual object Run()
        {
            vcdStart();
            var ret = base.Run();
            VcdEnd();
            return ret;
        }
        public virtual object Run(TimeSpan span)
        {
            vcdStart();
            var ret = base.Run(span);
            VcdEnd();
            return ret;
        }

    }
}
